{
  "name": "Orbita",
  "tagline": "Orbita: framework for Atom/Electron with reactive windows controller and nanoservice's support",
  "body": "# Orbita: framework for Atom/Electron with reactive windows controller and nanoservice's support\r\n\r\n[![npm version](https://badge.fury.io/js/orbita.svg)](https://badge.fury.io/js/orbita)\r\n[![Build Status](https://travis-ci.org/arvitaly/orbita.svg?branch=master)](https://travis-ci.org/arvitaly/orbita)\r\n[![Coverage Status](https://coveralls.io/repos/github/arvitaly/orbita/badge.svg?branch=master&1)](https://coveralls.io/github/arvitaly/orbita?branch=master)\r\n\r\n# What is it?\r\n\r\nOrbita is component, like React, but for electron windows. It has `state` and method `render`. You can change state by method `setState` and if state was changed, orbita will run `render`. \r\nMethod `render` should return array of windows options, like as `id`, `url` etc.\r\nAfter calling `render` orbita compare current opened windows and result of `render` by `id`, then close old windows and create new.\r\n\r\nAlso, orbita supported nanoservice (https://github.com/arvitaly/node-nanoservice), and two transports `orbita-ipc-server` and `orbita-ipc-client`. So, you can work with many window and main process in single workflow. Every window is one nanoservice.\r\n\r\nSo,  you create orbita-component with settings for controll windows and messages, forget it, and work for bussiness logic.\r\n\r\n# Install\r\n\r\n    //First, install orbita, now works with 0.36.0 version of Electron\r\n    npm install orbita@2.0.0 -g\r\n    //start app, if not set script, orbita will find main module in package.json or just take index.js\r\n    orbita app.js\r\n\r\n# Example of usage\r\n    //app.js    \r\n    //create orbita component\r\n    module.exports =({\r\n            //initial state\r\n            state: {\r\n                test: 28,\r\n                fix: fixture1\r\n            },\r\n            //render state-->windows\r\n            render: (state) => {\r\n                return [{\r\n                    //unique id\r\n                    id: state.test == 28 ? \"w1\" : \"w2\",\r\n                    //starting url\r\n                    url: __dirname + \"/index.html\",\r\n                    //Control script, which can send start and error event                    \r\n                    control:{\r\n                        script: __dirname + \"/control.js\",\r\n                        args: {\r\n                            test: \"value\"\r\n                        }\r\n                    },                    \r\n                    //you can create many nanoservices for one window\r\n                    services:[{\r\n                        ////path to service for create nanoservice\r\n                        module: __dirname + \"/service1.js\",\r\n                        //args for creating service\r\n                        args: state.fix + state.test,\r\n                        //transports for nanoservice\r\n                        transports: {\r\n                            \"tr1\": {\r\n                                \"type\": \"orbita\",\r\n                                opts: {\r\n                                    address: \"addr1\"\r\n                                }\r\n                            }\r\n                        },\r\n                        //links for nanoservice\r\n                        links: [\r\n                            {\r\n                                type: \"in\",\r\n                                name: \"in1\",\r\n                                to: \"event2\",\r\n                                transport: \"tr1\"\r\n                            },\r\n                            {\r\n                                type: \"out\",\r\n                                name: \"out1\",\r\n                                to: \"event1\",\r\n                                transport: \"tr1\"\r\n                            }\r\n                        ]\r\n                    }]\r\n                }]\r\n            }\r\n        })\r\n        //Nanoservice in main process        \r\n        nanoservice({\r\n            in:{\r\n                ev:(data)=>{\r\n                    //data from page-service for out-link out1 connected by \"orbita\" transport\r\n                }\r\n            }\r\n        },{\r\n            transports:{\"t\":{\"type\":\"orbita\",opts:{\"address\":\"addr1\"}}}\r\n            links:[{transport:\"t\", name:\"ev\",to:\"event1\", type:\"in\"}]\r\n        })\r\n        \r\n    \r\n    Look for more examples https://github.com/arvitaly/orbita/tree/master/examples/\r\n\r\n# Tranports\r\n\r\nEvery window in orbita can use any transport by nanoservice functional (like, socket, ipc, websocket, http, etc.)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}